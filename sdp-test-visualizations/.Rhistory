rot.per=0.35,
colors=brewer.pal(8, "Accent"),
family="Century", font=1)
}
# word cloud, freq table, freq bar chart
object_cloud2 <- create_word_cloud2("object", clean_data)
object_cloud1 <- create_word_cloud1
object_cloud1 <- create_word_cloud1("object", clean_data)
object_table <- create_freq_table(10, object_cloud1)
object_chart <- create_freq_chart(10,
object_cloud,
"What objects did Joseph sell, and to who?",
"navyblue")
object_chart <- create_freq_chart(10,
object_cloud1,
"What objects did Joseph sell, and to who?",
"navyblue")
#word cloud, freq table, freq bar chart
ailment_cloud <- create_word_cloud("ailments", clean_data)
#word cloud, freq table, freq bar chart
ailment_cloud2 <- create_word_cloud2("ailments", clean_data)
ailment_cloud1 <- create_word_cloud1("ailments", clean_data)
ailment_table <- create_freq_table(10, ailment_cloud1)
ailment_chart <- create_freq_chart(10,
ailment_cloud1,
"What ailments did Joseph experience, and what remedies did he try to deal with these?",
"pink")
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# filtering for valid emails
test_data <- test_data %>%
dplyr::filter(str_detect(email, '@'))
test_data <- select_questions(clean_data, c("motivation", "ailments", "object"))
### IMPORTING DATA #############################################################
original_data <- read.csv("data/test_data.csv", stringsAsFactors = FALSE)
View(original_data)
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# filtering for valid emails
test_data <- test_data %>%
dplyr::filter(str_detect(email, '@'))
test_data <- select_questions(clean_data, c("motivation", "ailments", "object"))
View(test_data)
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos <- find_typos(test_data, "test_data")
print(typos)
typos2 <- find_typos(test_data, "test_data")
print(typos2)
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
typos2 <- find_typos(test_data, "test_data")
print(typos2)
test_data <- original_data
test_data <- change_col_names(test_data, c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent'))
# FUNCTION: changing column names
change_col_names <- function(data, name_list) {
colnames(data) <- c(name_list)
}
test_data <- change_col_names(test_data, c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent'))
# FUNCTION: changing column names
change_col_names <- function(data, name_list) {
colnames(data) <- c(name_list)
return(data)
}
test_data <- change_col_names(test_data, c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent'))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# filtering for valid emails
test_data <- test_data %>%
dplyr::filter(str_detect(email, '@'))
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
View(test_data)
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: replace misspellings in data
replace_typo <- function(data, index, replacement, col_names) {
for (col in col_names) {
data[[col]] <- gsub(typos[index], replacement, data[[col]])
print(data[[col]])
}
return(data)
}
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo: ")
new_data <- replace_typo(new_data, i, replacement, col_names)
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
# FUNCTION: replace misspellings in data
replace_typo <- function(data, index, replacement, col_names) {
for (col in col_names) {
data[[col]] <- gsub(typos[index], replacement, data[[col]])
print(data[[col]])
}
return(data)
}
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo: ")
new_data <- replace_typo(new_data, i, replacement, col_names)
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: replace misspellings in data
replace_typo <- function(data, index, replacement, col_names) {
for (col in col_names) {
data[[col]] <- gsub(typos[index], replacement, data[[col]])
print(data[[col]])
}
return(data)
}
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo: ")
new_data <- replace_typo(new_data, i, replacement, col_names)
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's')
new_data <- replace_typo(new_data, i, replacement, col_names)
else
new_data <- replace_typo(new_data, i, "", col_names)
}
return(new_data)
}
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: replace misspellings in data
replace_typo <- function(data, index, replacement, col_names) {
for (col in col_names) {
data[[col]] <- gsub(typos[index], replacement, data[[col]])
print(data[[col]])
}
return(data)
}
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's')
new_data <- replace_typo(new_data, i, replacement, col_names)
else
new_data <- replace_typo(new_data, i, "", col_names)
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
View(clean_data)
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
# FUNCTION: make column lowercase
make_col_lower <- function(data, col_names) {
for (col in col_names) {
data[[col]] <- tolower(data[[col]])
}
return(data)
}
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's')
new_data <- replace_typo(new_data, i, replacement, col_names)
else
i = i+1
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement == 's')
i = i + 1
else
new_data <- replace_typo(new_data, i, replacement, col_names)
}
return(new_data)
}
print(typos2)
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
print(typos2)
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
test_data <- filter_valid(test_data, '@')
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
print(typos2)
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
} else {
new_data <- replace_typo(new_data, i, word, col_names)
}
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
}
if (replacement == 's') {
new_data <- replace_typo(new_data, i, word, col_names)
}
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
#if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
#}
#if (replacement == 's') {
#new_data <- replace_typo(new_data, i, word, col_names)
#}
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# data libraries (extraction, cleaning, plotting)
library(dplyr)
library(readr)
library(stringr)
library(tidyverse)
library(plotly)
library(hunspell)
library(textclean)
library(syuzhet)
# word cloud libraries
library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
library(extrafont) #font_import()
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
test_data <- filter_valid(test_data, '@')
# FUNCTION: select relevant question columns
select_questions <- function(data, col_names) {
data <- subset(data, select=col_names)
return(data)
}
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
# FUNCTION: check for misspellings
find_typos <- function(data, data_name) {
file_name <- paste0(data_name, ".csv")
write.csv(data, file = file_name, row.names=FALSE)
clean_text <- read_lines(file_name, skip_empty_rows = TRUE)
bad_words <- hunspell(clean_text, format = "latex")
bad_words <- sort(unique(unlist(bad_words)))
}
typos2 <- find_typos(test_data, "test_data")
print(typos2)
# FUNCTION: replace misspellings in data
replace_typo <- function(data, index, replacement, col_names) {
for (col in col_names) {
data[[col]] <- gsub(typos[index], replacement, data[[col]])
print(data[[col]])
}
return(data)
}
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
#if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
#}
#if (replacement == 's') {
#new_data <- replace_typo(new_data, i, word, col_names)
#}
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
}
repeat {
ret <- .Call(utils:::C_menu, letters)
if (ret == 's') {
break
}
}
}
return(new_data)
}
test_data <- original_data
# changing column names
colnames(test_data) <- c('time', 'name', 'email', 'object', 'motivation', 'photo_link', 'photo_source', 'ailments', 'consent')
# FUNCTION: filter for valid emails
filter_valid <- function(data, pattern) {
data <- data %>%
dplyr::filter(str_detect(email, '@'))
}
test_data <- filter_valid(test_data, '@')
test_data <- select_questions(test_data, c("motivation", "ailments", "object"))
print(typos2)
# FUNCTION: fix typos by user input
fix_typos <- function(typo_list, new_data, col_names) {
for (i in 1:length(typo_list)) {
word = typo_list[i]
print(word)
print(i)
replacement <- readline(prompt = "Enter new word to fix typo or 's' to skip: ")
if (replacement != 's') {
new_data <- replace_typo(new_data, i, replacement, col_names)
}
repeat {
ret <- .Call(utils:::C_menu, letters)
if (ret == 's') {
break
}
}
}
return(new_data)
}
test_data <- fix_typos(typos2, test_data, c("motivation", "ailments", "object"))
